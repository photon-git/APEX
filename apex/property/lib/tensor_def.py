import numpy as np
import matplotlib.pyplot as plt
import math
from sympy import *
import sympy as sp

def get_E_FCC(a,c11,c12,c44,dislocation_type,theta2):   
    ##############screw dislocation#################
    #Burgers vector b_k


    if dislocation_type=='screw':
        b_k=np.zeros(3)
        b_k[2]=a/np.sqrt(2)#*10**(-10)
    elif dislocation_type=='edge':
        b_k=np.zeros(3)
        b_k[0]=a/np.sqrt(2)
    else:
        #theta is the angle between the Burgers vector and ksi
        #for screw dislocation, theta=0; for edge dislocation, theta=90
        theta=float(dislocation_type)/180*np.pi+1e-6
        theta2=float(theta2)/180*np.pi+1e-6
        e_x=np.array([-1,1,0])/np.sqrt(2)
        e_y=np.array([1,1,1])/np.sqrt(3)
        e_z=np.array([1,1,-2])/np.sqrt(6)
        b_k=a/np.sqrt(2)*np.array([np.sin(theta),0,np.cos(theta)])
        b_k_2=a/np.sqrt(2)*np.array([np.sin(theta2),0,np.cos(theta2)])
        #=a/np.sqrt(2)*np.sin(theta)

        #print('Dislocation type is mixed, theta=',dislocation_type,'degree')
    #print('b_k=',b_k)

    #c11=113.79581343
    #c12=61.55474547
    #c44=31.59457515
    H=2*c44+c12-c11
    Cnnlist=[[1,1],[2,2],[3,3],[2,3],[3,1],[1,2],[3,2],[1,3],[2,1]]
    Cghmn=np.zeros((9,9))
    Cijkl=np.zeros((9,9))
    Cghmn[0][0]=Cghmn[1][1]=Cghmn[2][2]=c11
    Cghmn[0][1]=Cghmn[1][0]=Cghmn[0][2]=Cghmn[2][0]=Cghmn[1][2]=Cghmn[2][1]=c12
    Cghmn[3][3]=Cghmn[4][4]=Cghmn[5][5]=Cghmn[6][6]=Cghmn[7][7]=Cghmn[8][8]=c44
    Cghmn[3][6]=Cghmn[6][3]=Cghmn[4][7]=Cghmn[7][4]=Cghmn[5][8]=Cghmn[8][5]=c44

    if dislocation_type=='screw':
        T1j=np.array([1,1,1])/np.sqrt(3)
        T2j=np.array([1,1,-2])/np.sqrt(6)
        T3j=np.array([-1,1,0])/np.sqrt(2)
    elif dislocation_type=='edge':
        T1j=np.array([-1,1,0])/np.sqrt(2)
        T2j=np.array([1,1,1])/np.sqrt(3)
        T3j=np.array([1,1,-2])/np.sqrt(6)
    else:
        #print('dislocation type is wrong')
        T2j=np.array([1,1,1])/np.sqrt(3)
        T1j=e_x*np.sin(theta)-e_z*np.cos(theta)
        T3j=e_x*np.cos(theta)+e_z*np.sin(theta)


    Tij=np.array([T1j,T2j,T3j])
    #创建一个9*9的零矩阵
    Qnmkl=np.zeros((9,9))
    #矩阵Q满足Qnmkl=Tkm*Tln
    for mn in range(9):
        m=Cnnlist[mn][0]
        n=Cnnlist[mn][1]
        for kl in range(9):
            #print(mn,kl)
            k=Cnnlist[kl][0]
            l=Cnnlist[kl][1]
            #print([m,n],[k,l])
            Qnmkl[mn][kl]=Tij[k-1][m-1]*Tij[l-1][n-1]
    #print(Qnmkl)     
    Qnmkl_T=np.transpose(Qnmkl) 
    #Cijkl=Qnmkl_T*Cghmn*Qnmkl
    #Cijkl=np.dot(Qnmkl_T,np.dot(Cghmn,Qnmkl))
    Cijkl=np.dot(np.dot(Qnmkl_T,Cghmn),Qnmkl)
    #np.set_printoptions(precision = 2)
    #print(Cijkl)
    #创建3*3的A_0,A_1,A_2矩阵
    A_0=np.zeros((3,3))
    A_1=np.zeros((3,3))
    A_2=np.zeros((3,3))
    #A_0ik=Ci1k1,A_1ik=Ci2k1+Ci1k2,A_2ik=Ci2k2
    #A_0ik=Ci1k1
    I1list=[0,8,4]
    K1list=[0,8,4]
    I2list=[5,1,6]
    K2list=[5,1,6]
    for i in range(3):
        for k in range(3):
            A_0[i][k]=Cijkl[I1list[i]][K1list[k]]
    #A_2ik=Ci2k2
    for i in range(3):
        for k in range(3):
            A_2[i][k]=Cijkl[I2list[i]][K2list[k]]
    #A_1ik=Ci2k1+Ci1k2
    for i in range(3):
        for k in range(3):
            A_1[i][k]=Cijkl[I1list[i]][K2list[k]]+Cijkl[I2list[i]][K1list[k]]


    #step2: Solve aik and Ak
    if dislocation_type=='screw':
        P_4=A_2[0][0]*A_2[1][1]-A_2[0][1]*A_2[1][0]
        P_3=A_2[0][0]*A_1[1][1]-A_1[0][1]*A_2[1][0]-A_2[0][1]*A_1[1][0]+A_1[0][0]*A_2[1][1]
        P_2=A_2[0][0]*A_0[1][1]+A_0[0][0]*A_2[1][1]-A_1[0][1]*A_1[1][0]-A_2[0][1]*A_0[1][0]-A_0[0][1]*A_2[1][0]+A_1[0][0]*A_1[1][1]
        P_1=A_0[0][0]*A_1[1][1]
        P_0=A_0[0][0]*A_0[1][1]
        p = sp.Symbol('p')    # 定义符号变量
        f = P_4*p**4+P_3*p**3+P_2*p**2+P_1*p+P_0
        p = sp.solve(f)       # 调用solve函数求解方程
        p1=complex(-A_1[2][2],np.sqrt(4*A_2[2][2]*A_0[2][2]-A_1[2][2]**2))/(2*A_2[2][2]) 
        p2=complex(p[1])
        p3=complex(p[3])
        p4=complex(-A_1[2][2],-np.sqrt(4*A_2[2][2]*A_0[2][2]-A_1[2][2]**2))/(2*A_2[2][2])
        p5=complex(p[0])
        p6=complex(p[2])
        P_n=np.array([p1,p2,p3,p4,p5,p6])
        ai1=A_2*p1**2+A_1*p1+A_0
        ai2=A_2*p2**2+A_1*p2+A_0
        ai3=A_2*p3**2+A_1*p3+A_0
        ai4=A_2*p4**2+A_1*p4+A_0
        ai5=A_2*p5**2+A_1*p5+A_0
        ai6=A_2*p6**2+A_1*p6+A_0
        #aik Ak=0
        #For Ak1, set A31=1
        Ak1=np.zeros((3,1))*0j
        Ak1[0][0]=(ai1[0][1]*ai1[1][2]-ai1[0][2]*ai1[1][1])/(ai1[0][0]*ai1[1][1]-ai1[0][1]*ai1[1][0])
        Ak1[1][0]=-(ai1[0][0]*ai1[1][2]-ai1[0][2]*ai1[1][0])/((ai1[0][0]*ai1[1][1]-ai1[0][1]*ai1[1][0]))
        Ak1[2][0]=1
        #For Ak2, A32=0, set A22=1
        Ak2=np.zeros((3,1))*0j
        Ak2[0][0]=-ai2[0][1]/ai2[0][0]
        Ak2[1][0]=1
        Ak2[2][0]=0

        #For Ak3, A33=0, set A23=1
        Ak3=np.zeros((3,1))*0j
        Ak3[0][0]=-ai3[0][1]/ai3[0][0]
        Ak3[1][0]=1
        Ak3[2][0]=0
    
    #elif dislocation_type=='edge':
    else:
        #det_a_nn
        #det_a_nn=a11_a22_a33-a11_a23_a32-a12_a21_a33+a12_a23_a31+a13_a21_a32-a13_a22_a31
        a11_a22_a33=np.zeros(7)
        #a11_a22_a33=[p^6,p^5,p^4,p^3,p^2,p^1,p^0]
        a11_a22_a33[0]=A_2[0][0]*A_2[1][1]*A_2[2][2]
        a11_a22_a33[1]=A_2[0][0]*A_2[1][1]*A_1[2][2]+A_2[0][0]*A_1[1][1]*A_2[2][2]+A_1[0][0]*A_2[1][1]*A_2[2][2]
        a11_a22_a33[2]=A_2[0][0]*A_1[1][1]*A_1[2][2]+A_1[0][0]*A_2[1][1]*A_1[2][2]+A_1[0][0]*A_1[1][1]*A_2[2][2]+A_0[0][0]*A_2[1][1]*A_2[2][2]+A_2[0][0]*A_0[1][1]*A_2[2][2]+A_2[0][0]*A_2[1][1]*A_0[2][2]
        a11_a22_a33[3]=A_1[0][0]*A_1[1][1]*A_1[2][2]+A_2[0][0]*A_1[1][1]*A_0[2][2]+A_2[0][0]*A_0[1][1]*A_1[2][2]+A_1[0][0]*A_2[1][1]*A_0[2][2]+A_0[0][0]*A_2[1][1]*A_1[2][2]+A_1[0][0]*A_0[1][1]*A_2[2][2]+A_0[0][0]*A_1[1][1]*A_2[2][2]
        a11_a22_a33[4]=A_1[0][0]*A_1[1][1]*A_0[2][2]+A_1[0][0]*A_0[1][1]*A_1[2][2]+A_0[0][0]*A_1[1][1]*A_1[2][2]+A_2[0][0]*A_0[1][1]*A_0[2][2]+A_0[0][0]*A_2[1][1]*A_0[2][2]+A_0[0][0]*A_0[1][1]*A_2[2][2]
        a11_a22_a33[5]=A_1[0][0]*A_0[1][1]*A_0[2][2]+A_0[0][0]*A_1[1][1]*A_0[2][2]+A_0[0][0]*A_0[1][1]*A_1[2][2]
        a11_a22_a33[6]=A_0[0][0]*A_0[1][1]*A_0[2][2]

        a11_a23_a32=np.zeros(7)
        #a11_a23_a32=[p^6,p^5,p^4,p^3,p^2,p^1,p^0]
        a11_a23_a32[0]=A_2[0][0]*A_2[1][2]*A_2[2][1]
        a11_a23_a32[1]=A_2[0][0]*A_2[1][2]*A_1[2][1]+A_2[0][0]*A_1[1][2]*A_2[2][1]+A_1[0][0]*A_2[1][2]*A_2[2][1]
        a11_a23_a32[2]=A_2[0][0]*A_1[1][2]*A_1[2][1]+A_1[0][0]*A_2[1][2]*A_1[2][1]+A_1[0][0]*A_1[1][2]*A_2[2][1]+A_0[0][0]*A_2[1][2]*A_2[2][1]+A_2[0][0]*A_0[1][2]*A_2[2][1]+A_2[0][0]*A_2[1][2]*A_0[2][1]
        a11_a23_a32[3]=A_1[0][0]*A_1[1][2]*A_1[2][1]+A_2[0][0]*A_1[1][2]*A_0[2][1]+A_2[0][0]*A_0[1][2]*A_1[2][1]+A_1[0][0]*A_2[1][2]*A_0[2][1]+A_0[0][0]*A_2[1][2]*A_1[2][1]+A_1[0][0]*A_0[1][2]*A_2[2][1]+A_0[0][0]*A_1[1][2]*A_2[2][1]
        a11_a23_a32[4]=A_1[0][0]*A_1[1][2]*A_0[2][1]+A_1[0][0]*A_0[1][2]*A_1[2][1]+A_0[0][0]*A_1[1][2]*A_1[2][1]+A_2[0][0]*A_0[1][2]*A_0[2][1]+A_0[0][0]*A_2[1][2]*A_0[2][1]+A_0[0][0]*A_0[1][2]*A_2[2][1]
        a11_a23_a32[5]=A_1[0][0]*A_0[1][2]*A_0[2][1]+A_0[0][0]*A_1[1][2]*A_0[2][1]+A_0[0][0]*A_0[1][2]*A_1[2][1]
        a11_a23_a32[6]=A_0[0][0]*A_0[1][2]*A_0[2][1]

        a12_a21_a33=np.zeros(7)
        #a12_a21_a33=[p^6,p^5,p^4,p^3,p^2,p^1,p^0]
        a12_a21_a33[0]=A_2[0][1]*A_2[1][0]*A_2[2][2]
        a12_a21_a33[1]=A_2[0][1]*A_2[1][0]*A_1[2][2]+A_2[0][1]*A_1[1][0]*A_2[2][2]+A_1[0][1]*A_2[1][0]*A_2[2][2]
        a12_a21_a33[2]=A_2[0][1]*A_1[1][0]*A_1[2][2]+A_1[0][1]*A_2[1][0]*A_1[2][2]+A_1[0][1]*A_1[1][0]*A_2[2][2]+A_0[0][1]*A_2[1][0]*A_2[2][2]+A_2[0][1]*A_0[1][0]*A_2[2][2]+A_2[0][1]*A_2[1][0]*A_0[2][2]
        a12_a21_a33[3]=A_1[0][1]*A_1[1][0]*A_1[2][2]+A_2[0][1]*A_1[1][0]*A_0[2][2]+A_2[0][1]*A_0[1][0]*A_1[2][2]+A_1[0][1]*A_2[1][0]*A_0[2][2]+A_0[0][1]*A_2[1][0]*A_1[2][2]+A_1[0][1]*A_0[1][0]*A_2[2][2]+A_0[0][1]*A_1[1][0]*A_2[2][2]
        a12_a21_a33[4]=A_1[0][1]*A_1[1][0]*A_0[2][2]+A_1[0][1]*A_0[1][0]*A_1[2][2]+A_0[0][1]*A_1[1][0]*A_1[2][2]+A_2[0][1]*A_0[1][0]*A_0[2][2]+A_0[0][1]*A_2[1][0]*A_0[2][2]+A_0[0][1]*A_0[1][0]*A_2[2][2]
        a12_a21_a33[5]=A_1[0][1]*A_0[1][0]*A_0[2][2]+A_0[0][1]*A_1[1][0]*A_0[2][2]+A_0[0][1]*A_0[1][0]*A_1[2][2]
        a12_a21_a33[6]=A_0[0][1]*A_0[1][0]*A_0[2][2]

        a12_a23_a31=np.zeros(7)
        #a12_a23_a31=[p^6,p^5,p^4,p^3,p^2,p^1,p^0]
        a12_a23_a31[0]=A_2[0][1]*A_2[1][2]*A_2[2][0]
        a12_a23_a31[1]=A_2[0][1]*A_2[1][2]*A_1[2][0]+A_2[0][1]*A_1[1][2]*A_2[2][0]+A_1[0][1]*A_2[1][2]*A_2[2][0]
        a12_a23_a31[2]=A_2[0][1]*A_1[1][2]*A_1[2][0]+A_1[0][1]*A_2[1][2]*A_1[2][0]+A_1[0][1]*A_1[1][2]*A_2[2][0]+A_0[0][1]*A_2[1][2]*A_2[2][0]+A_2[0][1]*A_0[1][2]*A_2[2][0]+A_2[0][1]*A_2[1][2]*A_0[2][0]
        a12_a23_a31[3]=A_1[0][1]*A_1[1][2]*A_1[2][0]+A_2[0][1]*A_1[1][2]*A_0[2][0]+A_2[0][1]*A_0[1][2]*A_1[2][0]+A_1[0][1]*A_2[1][2]*A_0[2][0]+A_0[0][1]*A_2[1][2]*A_1[2][0]+A_1[0][1]*A_0[1][2]*A_2[2][0]+A_0[0][1]*A_1[1][2]*A_2[2][0]
        a12_a23_a31[4]=A_1[0][1]*A_1[1][2]*A_0[2][0]+A_1[0][1]*A_0[1][2]*A_1[2][0]+A_0[0][1]*A_1[1][2]*A_1[2][0]+A_2[0][1]*A_0[1][2]*A_0[2][0]+A_0[0][1]*A_2[1][2]*A_0[2][0]+A_0[0][1]*A_0[1][2]*A_2[2][0]
        a12_a23_a31[5]=A_1[0][1]*A_0[1][2]*A_0[2][0]+A_0[0][1]*A_1[1][2]*A_0[2][0]+A_0[0][1]*A_0[1][2]*A_1[2][0]
        a12_a23_a31[6]=A_0[0][1]*A_0[1][2]*A_0[2][0]

        a13_a21_a32=np.zeros(7)
        #a13_a21_a32=[p^6,p^5,p^4,p^3,p^2,p^1,p^0]
        a13_a21_a32[0]=A_2[0][2]*A_2[1][0]*A_2[2][1]
        a13_a21_a32[1]=A_2[0][2]*A_2[1][0]*A_1[2][1]+A_2[0][2]*A_1[1][0]*A_2[2][1]+A_1[0][2]*A_2[1][0]*A_2[2][1]
        a13_a21_a32[2]=A_2[0][2]*A_1[1][0]*A_1[2][1]+A_1[0][2]*A_2[1][0]*A_1[2][1]+A_1[0][2]*A_1[1][0]*A_2[2][1]+A_0[0][2]*A_2[1][0]*A_2[2][1]+A_2[0][2]*A_0[1][0]*A_2[2][1]+A_2[0][2]*A_2[1][0]*A_0[2][1]
        a13_a21_a32[3]=A_1[0][2]*A_1[1][0]*A_1[2][1]+A_2[0][2]*A_1[1][0]*A_0[2][1]+A_2[0][2]*A_0[1][0]*A_1[2][1]+A_1[0][2]*A_2[1][0]*A_0[2][1]+A_0[0][2]*A_2[1][0]*A_1[2][1]+A_1[0][2]*A_0[1][0]*A_2[2][1]+A_0[0][2]*A_1[1][0]*A_2[2][1]
        a13_a21_a32[4]=A_1[0][2]*A_1[1][0]*A_0[2][1]+A_1[0][2]*A_0[1][0]*A_1[2][1]+A_0[0][2]*A_1[1][0]*A_1[2][1]+A_2[0][2]*A_0[1][0]*A_0[2][1]+A_0[0][2]*A_2[1][0]*A_0[2][1]+A_0[0][2]*A_0[1][0]*A_2[2][1]
        a13_a21_a32[5]=A_1[0][2]*A_0[1][0]*A_0[2][1]+A_0[0][2]*A_1[1][0]*A_0[2][1]+A_0[0][2]*A_0[1][0]*A_1[2][1]
        a13_a21_a32[6]=A_0[0][2]*A_0[1][0]*A_0[2][1]

        a13_a22_a31=np.zeros(7)
        #a13_a22_a31=[p^6,p^5,p^4,p^3,p^2,p^1,p^0]
        a13_a22_a31[0]=A_2[0][2]*A_2[1][1]*A_2[2][0]
        a13_a22_a31[1]=A_2[0][2]*A_2[1][1]*A_1[2][0]+A_2[0][2]*A_1[1][1]*A_2[2][0]+A_1[0][2]*A_2[1][1]*A_2[2][0]
        a13_a22_a31[2]=A_2[0][2]*A_1[1][1]*A_1[2][0]+A_1[0][2]*A_2[1][1]*A_1[2][0]+A_1[0][2]*A_1[1][1]*A_2[2][0]+A_0[0][2]*A_2[1][1]*A_2[2][0]+A_2[0][2]*A_0[1][1]*A_2[2][0]+A_2[0][2]*A_2[1][1]*A_0[2][0]
        a13_a22_a31[3]=A_1[0][2]*A_1[1][1]*A_1[2][0]+A_2[0][2]*A_1[1][1]*A_0[2][0]+A_2[0][2]*A_0[1][1]*A_1[2][0]+A_1[0][2]*A_2[1][1]*A_0[2][0]+A_0[0][2]*A_2[1][1]*A_1[2][0]+A_1[0][2]*A_0[1][1]*A_2[2][0]+A_0[0][2]*A_1[1][1]*A_2[2][0]
        a13_a22_a31[4]=A_1[0][2]*A_1[1][1]*A_0[2][0]+A_1[0][2]*A_0[1][1]*A_1[2][0]+A_0[0][2]*A_1[1][1]*A_1[2][0]+A_2[0][2]*A_0[1][1]*A_0[2][0]+A_0[0][2]*A_2[1][1]*A_0[2][0]+A_0[0][2]*A_0[1][1]*A_2[2][0]
        a13_a22_a31[5]=A_1[0][2]*A_0[1][1]*A_0[2][0]+A_0[0][2]*A_1[1][1]*A_0[2][0]+A_0[0][2]*A_0[1][1]*A_1[2][0]
        a13_a22_a31[6]=A_0[0][2]*A_0[1][1]*A_0[2][0]

        det_a_nn=a11_a22_a33-a11_a23_a32-a12_a21_a33+a12_a23_a31+a13_a21_a32-a13_a22_a31
        #print(det_a_nn)
        #step2: Solve aik and Ak
        #
        P_6=det_a_nn[0]
        P_5=det_a_nn[1]
        P_4=det_a_nn[2]
        P_3=det_a_nn[3]
        P_2=det_a_nn[4]
        P_1=det_a_nn[5]
        P_0=det_a_nn[6]

        p = sp.Symbol('p')    # 定义符号变量
        f = P_6*p**6+P_5*p**5+P_4*p**4+P_3*p**3+P_2*p**2+P_1*p+P_0
        p = sp.solve(f)       # 调用solve函数求解方程
        #print(p)
        p1=complex(p[1]) 
        p2=complex(p[3])
        p3=complex(p[5])
        p4=complex(p[0])
        p5=complex(p[2])
        p6=complex(p[4])
        P_n=np.array([p1,p2,p3,p4,p5,p6])
        ai1=A_2*p1**2+A_1*p1+A_0
        ai2=A_2*p2**2+A_1*p2+A_0
        ai3=A_2*p3**2+A_1*p3+A_0
        ai4=A_2*p4**2+A_1*p4+A_0
        ai5=A_2*p5**2+A_1*p5+A_0
        ai6=A_2*p6**2+A_1*p6+A_0
        #aik Ak=0
        #For Ak1, set A31=1
        Ak1=np.zeros((3,1))*0j
        Ak1[0][0]=(ai1[0][1]*ai1[1][2]-ai1[0][2]*ai1[1][1])/(ai1[0][0]*ai1[1][1]-ai1[0][1]*ai1[1][0])
        Ak1[1][0]=-(ai1[0][0]*ai1[1][2]-ai1[0][2]*ai1[1][0])/((ai1[0][0]*ai1[1][1]-ai1[0][1]*ai1[1][0]))
        Ak1[2][0]=1

        #For Ak2, set A32=1
        Ak2=np.zeros((3,1))*0j
        Ak2[0][0]=(ai2[0][1]*ai2[1][2]-ai2[0][2]*ai2[1][1])/(ai2[0][0]*ai2[1][1]-ai2[0][1]*ai2[1][0])
        Ak2[1][0]=-(ai2[0][0]*ai2[1][2]-ai2[0][2]*ai2[1][0])/((ai2[0][0]*ai2[1][1]-ai2[0][1]*ai2[1][0]))
        Ak2[2][0]=1

        #For Ak3, set A33=1
        Ak3=np.zeros((3,1))*0j
        Ak3[0][0]=(ai3[0][1]*ai3[1][2]-ai3[0][2]*ai3[1][1])/(ai3[0][0]*ai3[1][1]-ai3[0][1]*ai3[1][0])
        Ak3[1][0]=-(ai3[0][0]*ai3[1][2]-ai3[0][2]*ai3[1][0])/((ai3[0][0]*ai3[1][1]-ai3[0][1]*ai3[1][0]))
        Ak3[2][0]=1
    #else:
        #print("wrong input")

    #step3: Solve D(n)
    #Bijk_n=Cijk1+Pn*Cijk2
    #Bi2k_n=Ci2k1+Pn*Ci2k2
    Bi2k_n=np.zeros((3,3,3))*0j
    I2list=[5,1,6]
    K1list=[0,8,4]
    K2list=[5,1,6]
    for n in range(3):
        for i in range(3):
            for k in range(3):
                Bi2k_n[n][i][k]=Cijkl[I2list[i]][K1list[k]]+P_n[n]*Cijkl[I2list[i]][K2list[k]]


    #solve D(n) equations
    d1 = Symbol('d1', complex=True)
    d2 = Symbol('d2', complex=True)
    d3 = Symbol('d3', complex=True)

    f1 = sp.re(Ak1[0][0]*d1+Ak2[0][0]*d2+Ak3[0][0]*d3)-b_k[0]
    f2 = sp.re(Ak1[1][0]*d1+Ak2[1][0]*d2+Ak3[1][0]*d3)-b_k[1]
    f3 = sp.re(Ak1[2][0]*d1+Ak2[2][0]*d2+Ak3[2][0]*d3)-b_k[2]

    f4 = sp.re(np.dot(Bi2k_n[0][0],Ak1)[0]*d1+np.dot(Bi2k_n[1][0],Ak2)[0]*d2+np.dot(Bi2k_n[2][0],Ak3)[0]*d3)
    f5 = sp.re(np.dot(Bi2k_n[0][1],Ak1)[0]*d1+np.dot(Bi2k_n[1][1],Ak2)[0]*d2+np.dot(Bi2k_n[2][1],Ak3)[0]*d3)
    f6 = sp.re(np.dot(Bi2k_n[0][2],Ak1)[0]*d1+np.dot(Bi2k_n[1][2],Ak2)[0]*d2+np.dot(Bi2k_n[2][2],Ak3)[0]*d3)

    sol = sp.solve((f1, f2, f3, f4, f5, f6), d1, d2, d3)
    #print(sol)

    #step4: Solve energy coefficient K
    #Kbb=0

    Im1=sol[0][d1]*np.dot(Bi2k_n[0][0],Ak1)[0]+sol[0][d2]*np.dot(Bi2k_n[1][0],Ak2)[0]+sol[0][d3]*np.dot(Bi2k_n[2][0],Ak3)[0]
    Im2=sol[0][d1]*np.dot(Bi2k_n[0][1],Ak1)[0]+sol[0][d2]*np.dot(Bi2k_n[1][1],Ak2)[0]+sol[0][d3]*np.dot(Bi2k_n[2][1],Ak3)[0]
    Im3=sol[0][d1]*np.dot(Bi2k_n[0][2],Ak1)[0]+sol[0][d2]*np.dot(Bi2k_n[1][2],Ak2)[0]+sol[0][d3]*np.dot(Bi2k_n[2][2],Ak3)[0]

    Kbb=b_k_2[0]*sp.im(Im1)+b_k_2[1]*sp.im(Im2)+b_k_2[2]*sp.im(Im3)
    K=Kbb/(b_k[0]**2+b_k[1]**2+b_k[2]**2)
    E_aniso=Kbb/(4*np.pi)/(10**(11))
    result=[K,E_aniso]
    return result
    #print(K)
    #print(E_aniso)